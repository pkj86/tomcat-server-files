using UnityEngine;
using System.Collections;

[AddComponentMenu("Camera-Control/Mouse Orbit with zoom")]
public class MouseOrbitImproved : MonoBehaviour {
	
	public Transform target;
	public float distance = 150.0f;
	public float xSpeed = 1.0f;
	public float ySpeed = 50.0f;
	public float yMinLimit = 10f;
	public float yMaxLimit = 80f;
	public float distanceMin = 100.5f;
	public float distanceMax = 200f;
	float x = 0.0f;
	float y = 0.0f;
	public Quaternion rotation;
	// Use this for initialization
	/*
	void Awake()
	{
		if(zoom)
		{
			animation.Play ("samhyongzoom");
		}
	}
*/

	void Start () {
		Vector3 angles = transform.eulerAngles;
		x = angles.y;
		y = angles.x;
		
		// Make the rigid body not change rotation
		if (rigidbody)
			rigidbody.freezeRotation = true;
		 
		rotation = Quaternion.Euler (y, x, 0);
	}
	void Update () 
	{
		Ray ray = camera.ScreenPointToRay(Input.mousePosition);
		
		RaycastHit hit = new RaycastHit();
		if(Physics.Raycast(ray, out hit))
		{ 
			Vector3 pos = hit.point; 
			if (Input.GetMouseButtonDown (0) == true && hit.collider.gameObject.tag == "samhyong") 
			{
				Debug.Log("zoom in");
				target = 

			}
		}
	
	}
	void LateUpdate () 
	{


		
		if (Input.GetMouseButton(1) == true) 
		{
			if (target) 
			{
				x += Input.GetAxis ("Mouse X") * xSpeed * distance * 0.02f;
				
				y -= Input.GetAxis ("Mouse Y") * ySpeed * 0.02f;
				
				y = ClampAngle (y, yMinLimit, yMaxLimit);
				
				rotation = Quaternion.Euler (y, x, 0);
				//   RaycastHit hit;
				//   if (Physics.Linecast (target.position, transform.position, out hit)) {
				//         distance -= hit.distance;
				//   }
				
			}
		}
		distance = Mathf.Clamp (distance - Input.GetAxis ("Mouse ScrollWheel") * 100, distanceMin, distanceMax);
		Vector3 negDistance = new Vector3 (0.0f, 0.0f, -distance);
		Vector3 position = rotation * negDistance + target.position;
		transform.rotation = rotation;
		transform.position = position;
		
	}
	
	public static float ClampAngle(float angle, float min, float max)
	{
		if (angle < -360F)
			angle += 360F;
		if (angle > 360F)
			angle -= 360F;
		return Mathf.Clamp(angle, min, max);
	}	
}